unit uMain;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.StdCtrls,
  FMX.Layouts, FMX.Controls.Presentation, FMX.Edit, FMX.Objects,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef, FireDAC.FMXUI.Wait,
  Data.DB, FireDAC.Comp.Client, FireDac.dapt, FMX.ListView.Types,
  FMX.ListView.Appearances, FMX.ListView.Adapters.Base, FMX.ListView,
  System.Rtti, System.Bindings.Outputs, Fmx.Bind.Editors, Data.Bind.EngExt,
  Fmx.Bind.DBEngExt, Data.Bind.Components, Data.Bind.DBScope, Datasnap.DBClient,
  System.Actions, FMX.ActnList, System.Character;

type
  TEstadoForm = (Principal, Ranking, SelecionarJogador);

  TForm1 = class(TForm)
    pPrincipal: TLayout;
    lbJogoDaVelha: TLabel;
    LayoutCabecalho: TLayout;
    LayoutNoveBotoes: TLayout;
    LayoutPrimeiro: TLayout;
    bt1: TButton;
    bt3: TButton;
    bt2: TButton;
    LayoutTerceiro: TLayout;
    bt7: TButton;
    bt9: TButton;
    bt8: TButton;
    LayoutSegundo: TLayout;
    bt4: TButton;
    bt6: TButton;
    bt5: TButton;
    LayoutJogo: TLayout;
    Line4: TLine;
    Line3: TLine;
    Line1: TLine;
    Line2: TLine;
    Rectangle1: TRectangle;
    Rectangle2: TRectangle;
    LayoutResetEInformacoes: TLayout;
    btRestart: TButton;
    lbVitorias: TLabel;
    lbX: TLabel;
    edtX: TEdit;
    LayoutVitorias: TLayout;
    LayoutCabecalhoVitoria: TLayout;
    LayoutX: TLayout;
    LayoutO: TLayout;
    edtO: TEdit;
    lbO: TLabel;
    btnReset: TButton;
    LayoutBotoesReset: TLayout;
    LayoutBtnRestart: TLayout;
    LayoutBtnReset: TLayout;
    pSelecionarJogador: TLayout;
    LayoutBotoesXouO: TLayout;
    btnX: TButton;
    btnO: TButton;
    lbCabeclaho: TLabel;
    pRanking: TLayout;
    lbCabecalhoRanking: TLabel;
    lbID3: TLabel;
    lbRodaPeVoltar: TLabel;
    LayoutID3: TLayout;
    lbJogador3: TLabel;
    LayoutID4: TLayout;
    lbID4: TLabel;
    lbJogador4: TLabel;
    LayoutID2: TLayout;
    lbID2: TLabel;
    lbJogador2: TLabel;
    LayoutID1: TLayout;
    lbID1: TLabel;
    lbJogador1: TLabel;
    LayoutID5: TLayout;
    lbID5: TLabel;
    lbJogador5: TLabel;
    LayoutListaJogadores: TLayout;
    LayoutRankingGeral: TLayout;
    Rectangle5: TRectangle;
    Button2: TButton;
    Label1: TLabel;
    Rectangle3: TRectangle;
    BrushRanking: TBrushObject;
    Estilos: TStyleBook;
    HotKeys: TActionList;
    Esc: TAction;
    Layout1: TLayout;
    Layout2: TLayout;
    edt1: TEdit;
    edt2: TEdit;
    conexao: TFDConnection;
    lbNomeX: TLabel;
    lbNameO: TLabel;
    procedure bt1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btRestartClick(Sender: TObject);
    procedure btnResetClick(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure btnXClick(Sender: TObject);
    procedure btnOClick(Sender: TObject);
    procedure EscExecute(Sender: TObject);
    procedure VerificarBotao(BT: TButton);
    procedure lbNomeXClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure SetEstadoForm(Value: TEstadoForm; resetar: Boolean = true);
    procedure VerificarVelha;
    procedure VerificarGanhador(botao: TButton);
    procedure LimparBotoes;
    procedure LimparBotoesAll;
    function  ValidacaoDeNomes(nome_1: String; nome_2: String):Boolean;
   // procedure IncrementarPonto;
    function SelecionarNomes(nome: String): string;
  end;
var
  Form1: TForm1;
  fEstadoForm: TEstadoForm;
  VEZ : String;
  MOMENTO   : Integer;
  PONTO_X   : Integer;
  PONTO_O   : Integer;
  JOGADOR_1 : String;
  JOGADOR_2 : String;

implementation

{$R *.fmx}

procedure TForm1.bt1Click(Sender: TObject);
begin
  if TButton(Sender).Text.IsEmpty then
  begin
    if VEZ = 'X' then
      VEZ := 'O'
    else
      VEZ := 'X';

    TButton(Sender).Text := VEZ;
    MOMENTO := MOMENTO + 1;
  end;

  VerificarVelha;
end;

procedure TForm1.btnOClick(Sender: TObject);
begin
  VEZ := 'X';
  VerificarBotao(btnO);
end;

procedure TForm1.btnXClick(Sender: TObject);
begin
  VEZ := 'O';
  VerificarBotao(btnX);
end;

procedure TForm1.btRestartClick(Sender: TObject);
begin
  LimparBotoes;
end;

procedure TForm1.btnResetClick(Sender: TObject);
begin
  LimparBotoesAll;
  SetEstadoForm(SelecionarJogador);
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  SetEstadoForm(Ranking);
  //IncrementarPonto;

end;

procedure TForm1.EscExecute(Sender: TObject);
begin
  case fEstadoForm  of
    Principal:
    begin
      SetEstadoForm(SelecionarJogador);
      LimparBotoesAll;
    end;

    Ranking:
      SetEstadoForm(Principal);
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  SetEstadoForm(SelecionarJogador);

  MOMENTO     := 0;
  PONTO_X     := 0;
  PONTO_O     := 0;
end;

procedure TForm1.lbNomeXClick(Sender: TObject);
begin
//  SelecionarNomes;
end;

procedure TForm1.LimparBotoes;
begin
  bt1.Text := '';
  bt2.Text := '';
  bt3.Text := '';
  bt4.Text := '';
  bt5.Text := '';
  bt6.Text := '';
  bt7.Text := '';
  bt8.Text := '';
  bt9.Text := '';
  MOMENTO  := 0;
  VEZ := 'X';
end;

procedure TForm1.LimparBotoesAll;
begin
  //IncrementarPonto();
  bt1.Text := '';
  bt2.Text := '';
  bt3.Text := '';
  bt4.Text := '';
  bt5.Text := '';
  bt6.Text := '';
  bt7.Text := '';
  bt8.Text := '';
  bt9.Text := '';
  edtX.Text:= '';
  edtO.Text:= '';
  MOMENTO  := 0;
  PONTO_X  := 0;
  PONTO_O  := 0;
  VEZ := 'X';
end;

function TForm1.SelecionarNomes(nome: String): string;
var
  Qry : TFDQuery;
begin
  Qry := TFDQuery.Create(nil);

  with Qry do
  begin
    Connection := conexao;

    Sql.Add('SELECT nome FROM jogadores_ranking WHERE nome LIKE :nome');
    ParamByName('nome').AsString := lbNomeX.Text;

    Open;
      result := FieldByName('nome').AsString;
    Close;

  end;

  FreeAndNil(Qry);
end;

procedure TForm1.SetEstadoForm(Value: TEstadoForm; resetar: Boolean);
begin
  if Value = fEstadoForm then
    Exit;

  // ESCONDER TELA
  case fEstadoForm of // TELA ATUAL
    SelecionarJogador:
    begin
      pSelecionarJogador.Visible := false;
      pSelecionarJogador.Enabled := false;
      pSelecionarJogador.SendToBack;
    end;

    Principal:
    begin
      pPrincipal.Visible := false;
      pPrincipal.Enabled := false;
      pPrincipal.SendToBack;
    end;

    Ranking:
    begin
      pRanking.Visible := false;
      pRanking.Enabled := false;
      pRanking.SendToBack;
    end;
  end;

  // MOSTRAR TELA
  case Value of
    SelecionarJogador:
    begin
      pSelecionarJogador.Enabled := true;
      pSelecionarJogador.Visible := true;
      pSelecionarJogador.BringToFront;
    end;

    Principal:
    begin
      pPrincipal.Enabled := true;
      pPrincipal.Visible := true;
      pPrincipal.BringToFront;
    end;

    Ranking:
    begin
      pRanking.Enabled := true;
      pRanking.Visible := true;
      pRanking.BringToFront;
    end;
  end;

  fEstadoForm := Value;
end;

function TForm1.ValidacaoDeNomes(nome_1, nome_2: String): Boolean;
var
  Qry : TFDQuery;
begin
  Qry    := TFDQuery.Create(nil);
  result := false;

  with Qry do
  begin
    connection := conexao;

    Sql.Add('SELECT nome FROM jogadores_ranking WHERE nome LIKE :nome1 OR nome LIKE :nome2 ');
    ParamByName('nome1').AsString := nome_1;
    ParamByName('nome2').AsString := nome_2;
    Open;
      if RecordCount > 0 then //VERIFICAÇÃO SE RETORNA ALGUM NOME NO BANCO OU RETORNA UMA LINHA
        result:= true;
    Close;
  end;

  FreeAndNil(Qry);
end;

procedure TForm1.VerificarBotao(BT: TButton);
var
  Qry : TFDQuery;
begin
  if ValidacaoDeNomes(edt1.Text, edt2.Text) = false then
  begin
    ///if not edt1.Text.IsEmpty and not edt2.Text.IsEmpty then


    if (not (edt1.Text.IsEmpty or edt2.Text.IsEmpty)) or (edt1.Text.IsEmpty and edt2.Text.IsEmpty) then
    begin
      if not (edt1.Text.IsEmpty or edt2.Text.IsEmpty) then
      begin

        Qry := TFDQuery.Create(nil);

        with Qry do
        begin
          connection := conexao;

          Sql.Add('INSERT INTO jogadores_ranking (nome) VALUES (:nome);');

          ParamByName('nome').AsString := edt1.Text;

          ExecSQL; // EXECUTAR O QUE ESTA ALI EM CIMA
          Sql.Clear;  // LIMPA O CODIGO DE BANCO ACIMA

          Sql.Add('INSERT INTO jogadores_ranking (nome) VALUES (:nome);');

          ParamByName('nome').AsString := edt2.Text;

          ExecSQL;  // EXECUTA NOVAMENTE
          Close; //FECHA A CONEXAO DO BANCO

          SetEstadoForm(Principal);
          SelecionarNomes(edt1.Text);
          SelecionarNomes(edt2.Text);

          edt1.Text := '';
          edt2.Text := '';
        end;
      end
      else
        SetEstadoForm(Principal);

      FreeAndNil(Qry);
    end
    else
      begin
        ShowMessage('Preencha os dois campos para iniciar');
        SetEstadoForm(SelecionarJogador);
      end;
  end
  else
    ShowMessage('Jogadores já estão cadastrados com um desses nomes');
end;

procedure TForm1.VerificarGanhador(botao: TButton);
begin
  ShowMessage('Jogador ' + botao.Text + ' ganhou!');

  if botao.Text = 'X' then
  begin
   PONTO_X := PONTO_X + 1;
   edtX.Text := IntToStr(PONTO_X);

  end
  else
  begin
   PONTO_O := PONTO_O + 1;
   edtO.Text := IntToStr(PONTO_O);
  end;

  VEZ := 'X';
  LimparBotoes;
end;

procedure TForm1.VerificarVelha;
begin

  if MOMENTO <> 10 then
  begin
    if (bt1.Text = bt2.Text) and (bt2.Text = bt3.Text) and (not (bt1.Text.IsEmpty and bt2.Text.IsEmpty and bt3.Text.IsEmpty))then
    begin
      VerificarGanhador(bt1);
    end
    else
    begin
      if (bt4.Text = bt5.Text) and (bt5.Text = bt6.Text) and (not (bt4.Text.IsEmpty and bt5.Text.IsEmpty and bt6.Text.IsEmpty)) then
      begin
        VerificarGanhador(bt4);
      end
      else
      begin
        if (bt7.Text = bt8.Text) and (bt8.Text = bt9.Text) and (not (bt7.Text.IsEmpty and bt8.Text.IsEmpty and bt9.Text.IsEmpty)) then
        begin
          VerificarGanhador(bt7);
        end
        else
        begin
          if (bt1.Text = bt4.Text) and (bt4.Text = bt7.Text) and (not (bt1.Text.IsEmpty and bt4.Text.IsEmpty and bt7.Text.IsEmpty)) then
          begin
            VerificarGanhador(bt1);
          end
          else
          begin
            if (bt2.Text = bt5.Text) and (bt5.Text = bt8.Text) and (not (bt2.Text.IsEmpty and bt5.Text.IsEmpty and bt8.Text.IsEmpty))then
            begin
              VerificarGanhador(bt2);
            end
            else
            begin
              if (bt3.Text = bt6.Text) and (bt6.Text = bt9.Text) and (not (bt3.Text.IsEmpty and bt6.Text.IsEmpty and bt9.Text.IsEmpty))then
              begin
                VerificarGanhador(bt3);
              end
              else
              begin
                if (bt3.Text = bt5.Text) and (bt5.Text = bt7.Text) and (not (bt3.Text.IsEmpty and bt5.Text.IsEmpty and bt7.Text.IsEmpty)) then
                begin
                  VerificarGanhador(bt5);
                end
                else
                begin
                  if (bt1.Text = bt5.Text) and (bt5.Text = bt9.Text) and (not (bt1.Text.IsEmpty and bt5.Text.IsEmpty and bt9.Text.IsEmpty)) then
                  begin
                    VerificarGanhador(bt5);
                  end;
                end;
                if MOMENTO = 9 then
                begin
                  ShowMessage('VELHA');
                  LimparBotoes;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end
  else
    begin
      ShowMessage('VELHA');
      LimparBotoes;
    end;
end;
end.
